{"version":3,"file":"static/js/491.31104499.chunk.js","mappings":"iOAIMA,EAAO,CACXC,KAAM,GACNC,MAAO,IAoCT,EAjCoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,+BACE,SAAC,KAAD,CAAQC,cAAeJ,EAAMG,SAAUA,EAAvC,UACE,UAAC,KAAD,CAAME,UAAU,OAAOC,aAAa,MAApC,WACE,oCACO,KACL,SAAC,KAAD,CACEC,KAAK,OACLN,KAAK,OACLO,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,sCACS,KACP,SAAC,KAAD,CACEH,KAAK,MACLN,KAAK,QACLO,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQL,UAAU,MAAME,KAAK,SAA7B,+BAOT,E,SCrBD,EAfiB,SAAC,GAAyB,IAAvBN,EAAsB,EAAtBA,KAAMU,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,0BACGb,EADH,KACWU,GACT,mBACEJ,KAAK,SACLQ,QAAS,kBAAMF,GAASG,EAAAA,EAAAA,IAAoBJ,GAAnC,EACTP,UAAU,MAHZ,sBASL,ECND,EAToB,SAAC,GAAa,IAAXY,EAAU,EAAVA,IACrB,OACE,wBACGA,EAAIC,KAAI,SAAAC,GAAE,OACT,SAAC,EAAD,CAAsBlB,KAAMkB,EAAGlB,KAAMU,MAAOQ,EAAGjB,MAAOU,GAAIO,EAAGP,IAA9CO,EAAGP,GADT,KAKhB,ECDD,EARe,SAAC,GAAyB,IAAvBD,EAAsB,EAAtBA,MAAOS,EAAe,EAAfA,SACvB,OACE,qDACwB,KACtB,kBAAOb,KAAK,OAAOI,MAAOA,EAAOU,SAAUD,MAGhD,E,SCqCD,EApCqB,WACnB,IAAMP,GAAWC,EAAAA,EAAAA,MACXQ,GAAcC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAV,IAC/BC,GAASH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,SAASC,SAAnB,IAC1BC,GAAgBN,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,SAASG,KAAnB,IAcjCC,EAAmBT,EAAYU,cAC/BC,EAAkBJ,EAAcJ,QAAO,SAAAS,GAAO,OAClDA,EAAQjC,KAAK+B,cAAcG,SAASJ,EADc,IAOpD,OAHAK,EAAAA,EAAAA,YAAU,WACRvB,GAASwB,EAAAA,EAAAA,MACV,GAAE,CAACxB,KAEF,iCACE,eAAIR,UAAU,QAAd,wBACA,SAAC,EAAD,CAAaF,SAvBK,SAACmC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC/B,GAAIV,EAAcW,MAAK,SAAAC,GAAG,OAAIA,EAAIxC,OAASqC,EAAOrC,IAAxB,IAExB,OADAsC,IACOG,OAAOC,MAAP,UAAgBL,EAAOrC,KAAvB,4BAETY,GAAS+B,EAAAA,EAAAA,IAAoBN,IAC7BC,GACD,KAiBG,eAAIlC,UAAU,WAAd,uBACA,SAAC,EAAD,CAAQM,MAAOW,EAAaF,SAhBV,SAAAyB,GACpBhC,GAASiC,EAAAA,EAAAA,GAAmBD,EAAEE,OAAOpC,OACtC,IAeIe,GAAS,wCAAsB,SAAC,EAAD,CAAaT,IAAKgB,MAGvD,C","sources":["components/Form/Form.jsx","components/Contacts/Item/Item.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport './Form.css';\n\nconst init = {\n  name: '',\n  phone: '',\n};\n\nconst ContactForm = ({ onSubmit }) => {\n  return (\n    <>\n      <Formik initialValues={init} onSubmit={onSubmit}>\n        <Form className=\"form\" autoComplete=\"off\">\n          <label>\n            Name{' '}\n            <Field\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n          <label>\n            Number{' '}\n            <Field\n              type=\"tel\"\n              name=\"phone\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n          <button className=\"btn\" type=\"sumbit\">\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Item.css';\nimport { delContactOperation } from 'redux/operations/contactsOperations';\n\nconst ListItem = ({ name, value, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <li>\n      {name}: {value}\n      <button\n        type=\"button\"\n        onClick={() => dispatch(delContactOperation(id))}\n        className=\"btn\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\nexport default ListItem;\n\nListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport ListItem from './Item/Item';\nimport './Contacts.css';\n\nconst ContactList = ({ arr }) => {\n  return (\n    <ul>\n      {arr.map(el => (\n        <ListItem key={el.id} name={el.name} value={el.phone} id={el.id} />\n      ))}\n    </ul>\n  );\n};\nexport default ContactList;\n\nContactList.propTypes = {\n  arr: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport './Filter.css';\n\nconst Filter = ({ value, onFilter }) => {\n  return (\n    <label>\n      Find contacts by name{' '}\n      <input type=\"text\" value={value} onChange={onFilter} />\n    </label>\n  );\n};\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactForm from '../../components/Form/Form';\nimport ContactList from '../../components/Contacts/Contacts';\nimport Filter from '../../components/Filter/Filter';\nimport { filterSliseReducer } from '../../redux/filterSlice';\nimport {\n  addContactOperation,\n  fetchContactsOperation,\n} from '../../redux/operations/contactsOperations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter);\n  const loader = useSelector(state => state.contacts.isLoading);\n  const contactsValue = useSelector(state => state.contacts.items);\n\n  const submitHandler = (values, { resetForm }) => {\n    if (contactsValue.some(obj => obj.name === values.name)) {\n      resetForm();\n      return window.alert(`${values.name} is already in contacts`);\n    }\n    dispatch(addContactOperation(values));\n    resetForm();\n  };\n\n  const filterHandler = e => {\n    dispatch(filterSliseReducer(e.target.value));\n  };\n  const normalizedFilter = filterValue.toLowerCase();\n  const visibleContacts = contactsValue.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  useEffect(() => {\n    dispatch(fetchContactsOperation());\n  }, [dispatch]);\n  return (\n    <>\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactForm onSubmit={submitHandler} />\n      <h2 className=\"subtitle\">Contacts</h2>\n      <Filter value={filterValue} onFilter={filterHandler} />\n      {loader ? <h2>Loading...</h2> : <ContactList arr={visibleContacts} />}\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["init","name","phone","onSubmit","initialValues","className","autoComplete","type","pattern","title","required","value","id","dispatch","useDispatch","onClick","delContactOperation","arr","map","el","onFilter","onChange","filterValue","useSelector","state","filter","loader","contacts","isLoading","contactsValue","items","normalizedFilter","toLowerCase","visibleContacts","contact","includes","useEffect","fetchContactsOperation","values","resetForm","some","obj","window","alert","addContactOperation","e","filterSliseReducer","target"],"sourceRoot":""}